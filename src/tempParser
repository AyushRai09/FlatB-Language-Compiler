%{
  #include <stdio.h>
  #include <stdlib.h>
  FILE *yyin;
  int yylex (void);
  void yyerror (char const *s);
  int flag=0;
  class Prog *start=NULL;
%}

%token declaration_list
%token DECLBLOCK
%token statement_list
%token NUMBER
%token IDENTIFIER
%token ETOK
%left '+'
%left '*'
%left '/'
%left '-'
%token INT
%token ARRAY
%token PRINT
%token STRING
%token CODEBLOCK
%token READ
%token IF
%token ELSE
%token COMPARE
%token EE
%token GT
%token LT
%token GTE
%token LTE
%token AND
%token OR
%token WHILE
%token FOR
%token LABEL
%token GOTO

%%

program: DECLBLOCK '{' decl_block '}' CODEBLOCK '{' code_block '}' {
  $$=new Prog($3, $7);
  start=$$;
}

decl_blocks: {$$=new fieldDecls();}
           | decl_blocks decl_block ';' {$$->push_back();}
decl_block:  decl_block INT variables {$$=new fieldDecl(string($1),$2);}

variables: variable{ $$=new Var();$$->push_back($1);}
           | variables ',' variable {$$->push_back($3);}

variable:  IDENTIFIER {$$=new Var(string("Identifier")$1);}
           | ARRAY  {$$=new Var(string("Array"),$1);}

code_blocks:{$$=new codeDecls();}
            | code_blocks code_block ';' {$$->push_back();}

code_block:print
		| read
		| expr {$$=new Expr($1);}
		| IF cond '{' code_block '}' {$$=new ifst($2,$4,$6);}
		| IF cond '{' code_block '}' ELSE '{' code_block '}' {$$=new ifelsest($2,$4,$6);}
		| WHILE cond '{' code_block '}' {$$=new whilest($2,$4,$6);}
		| FOR forloop '{' code_block '}' {$$=new forst($2,$4,$6);}
		| LABEL
		| GOTO IDENTIFIER call {$$=new callst($3);}


print: PRINT things
things:  IDENTIFIER
		| NUMBER
		| ARRAY
		| IDENTIFIER ',' things
		| NUMBER ',' things
		| ARRAY ',' things
		| STRING ',' things


read: READ thingsr
thingsr: IDENTIFIER
		| NUMBER
		| ARRAY
		| IDENTIFIER ',' thingsr
		| NUMBER ',' thingsr
		| ARRAY ',' thingsr

expr: IDENTIFIER '=' exprnew
		| ARRAY '=' exprnew

exprnew: arithmetic
		| IDENTIFIER
		| NUMBER
		| ARRAY

arithmetic: exprnew '+' exprnew
		| exprnew '-' exprnew
		| exprnew '/' exprnew
		| exprnew '*' exprnew

cond: exprnew compare exprnew andor cond |
compare: GT
	| LT
	| GTE
	| LTE
	| EE
andor: AND
	| OR
	|

forloop: IDENTIFIER '=' NUMBER ','  NUMBER inc
inc: ','  NUMBER
	|

call: IF cond |

%%


int main(int argc, char *argv[])
{
	if (argc == 1 ) {
		fprintf(stderr, "Correct usage: bcc filename\n");
		exit(1);
	}

	if (argc > 2) {
		fprintf(stderr, "Passing more arguments than necessary.\n");
		fprintf(stderr, "Correct usage: bcc filename\n");
	}

	yyin = fopen(argv[1], "r");

	yyparse();
	if(!flag)
		printf("Successfully parsed without any errors\n");
}

